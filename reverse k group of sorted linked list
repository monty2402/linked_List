/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */
Node* findKthNode(Node* temp , int k) {
    k-=1;
    while(temp != NULL  && k >0) {
        k--;
        temp = temp->next;
    }
    return temp;
}

Node* reverseLinkedList(Node *head)
{
    Node* temp = head;
    Node* prev = NULL;
    Node* front = NULL;

    while(temp != NULL) {
        front = temp->next;
        temp->next = prev;
        prev = temp;
        temp = front;
    }

    return prev;
    
}

Node* kReverse(Node* head, int k) {
    Node* temp = head;
    Node* prevNode = NULL;
    while(temp != NULL) {
        Node* kthNode = findKthNode(temp , k);
        if(kthNode == NULL) {
            if(prevNode) prevNode->next = temp;
            break;
        }
        Node* nextNode = kthNode->next;
        kthNode->next = NULL;
        reverseLinkedList(temp);

        if(temp == head) {
            head = kthNode;

        }
        else {
            prevNode->next = kthNode;
        }

        prevNode = temp;
        temp = nextNode;

    }

    return head;
}